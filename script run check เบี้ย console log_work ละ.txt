/**************** CONFIG ****************/
const scenarios = [
   { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2548', sum: 50000, coverage: 1,expected: 143 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2548', sum: 50000, coverage: 4,expected: 493 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2548', sum: 50000, coverage: 40,expected: 493 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2544', sum: 527096, coverage: 9,expected: 12107 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2544', sum: 349379, coverage: 10,expected: 8990 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2523', sum: 871393, coverage: 8,expected: 42968 },
 { title:'‡∏ô‡∏≤‡∏¢', dob: '01/01/2523', sum: 838457, coverage: 9,expected: 47683 },
 
];

// ‡∏≠‡πà‡∏≤‡∏ô Actual ‡∏à‡∏≤‡∏Å selector ‡∏ô‡∏µ‡πâ ‚Äú‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‚Äù (‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≠‡∏¢ fallback)
const ACTUAL_SELECTOR =
  '#tab\\/quotation > div > div > div:nth-child(1) > div > main > div:nth-child(5) > div > div.MuiCollapse-root.MuiCollapse-vertical.MuiCollapse-entered.css-pwcg7p-MuiCollapse-root > div > div > div > div > div:nth-child(1) > div.MuiBox-root.MuiBox-root-130 > div.MuiBox-root.MuiBox-root-132 > p:nth-child(2)';

const EXPORT_COLUMNS = [
  "TC No","‡∏Å‡∏£‡∏ì‡∏µ","‡∏≠‡∏≤‡∏¢‡∏∏","‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î","‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô","‡∏£‡∏∞‡∏¢‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á","Expected","Actual","Popup Msg","‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
];

const EPS = 0.5;

/******** Slowdown config (‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô) ********/
const DELAY_BETWEEN_FIELDS = 150;   // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå
const TITLE_TYPE_PAUSE     = 60;   // ‡∏´‡∏ô‡πà‡∏ß‡∏á/‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
const DOB_TYPE_PAUSE       = 40;    // ‡∏´‡∏ô‡πà‡∏ß‡∏á/‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏ï‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î

/**************** GLOBAL (for UI buttons) ****************/
window.LAST_RESULTS = [];
window.EXPORT_COLUMNS = EXPORT_COLUMNS;

/**************** CONTROLS (STOP + COPY) ****************/
(function ensureControls(){
  if (document.getElementById('qa-control-box')) return;

  const box = document.createElement('div');
  box.id = 'qa-control-box';
  Object.assign(box.style, {
    position:'fixed', top:'20px', right:'20px', zIndex: 2147483647,
    display:'flex', gap:'8px', alignItems:'center', fontFamily:'sans-serif'
  });

  const stopBtn = document.createElement('button');
  stopBtn.id = 'stop-btn';
  stopBtn.textContent = 'üõë STOP';
  Object.assign(stopBtn.style, {
    padding:'8px 14px', fontSize:'14px',
    background:'red', color:'#fff', border:'none', borderRadius:'6px',
    cursor:'pointer', boxShadow:'0 2px 8px rgba(0,0,0,.2)'
  });
  stopBtn.onclick = ()=>{ window.STOP_TEST = true; console.warn('üõë STOP pressed'); };

  const copyBtn = document.createElement('button');
  copyBtn.id = 'copy-tsv-btn';
  copyBtn.textContent = 'üìã Copy TSV';
  Object.assign(copyBtn.style, {
    padding:'8px 14px', fontSize:'14px',
    background:'#16a34a', color:'#fff', border:'none', borderRadius:'6px',
    cursor:'pointer', boxShadow:'0 2px 8px rgba(0,0,0,.2)'
  });
  copyBtn.title = '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á TSV';
  copyBtn.onclick = async ()=>{
    const tsv = buildTSV(window.LAST_RESULTS, window.EXPORT_COLUMNS);
    await copyText(tsv);
    console.log('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (TSV) ‡πÅ‡∏•‡πâ‡∏ß');
  };

  box.appendChild(stopBtn);
  box.appendChild(copyBtn);
  document.body.appendChild(box);
})();

/**************** HELPERS ****************/
const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));

function buildTSV(rows, cols){
  let t = (cols||EXPORT_COLUMNS).join('\t')+'\n';
  (rows||[]).forEach(r=>{
    t += (cols||EXPORT_COLUMNS).map(k => (r?.[k] ?? '')).join('\t') + '\n';
  });
  return t;
}

function setValue(el, v){
  if (!el) return;
  const proto = el.__proto__ || Object.getPrototypeOf(el);
  const desc = Object.getOwnPropertyDescriptor(proto, 'value');
  if (desc?.set) desc.set.call(el, v); else el.value = v;
  el.dispatchEvent(new Event('input',{bubbles:true}));
  el.dispatchEvent(new Event('change',{bubbles:true}));
}

async function ensureValue(input, value,{retries=3,pause=90}={}){
  if(!input) return false;
  for(let i=0;i<retries;i++){
    if (window.STOP_TEST) return false;
    input.focus(); setValue(input,String(value)); input.blur?.();
    await sleep(pause);
    const got=(input.value??input.getAttribute('value')??'').replace(/[, ]/g,'');
    if(got===String(value)) return true;
  }
  return false;
}

/* ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */
async function selectMuiByText(inputEl, text){
  if(!inputEl) return false;
  inputEl.focus(); inputEl.click(); await sleep(80);
  setValue(inputEl,''); await sleep(50);
  for (const ch of String(text)) {
    setValue(inputEl, (inputEl.value || '') + ch);
    await sleep(TITLE_TYPE_PAUSE);
  }
  await sleep(100);
  const findOption = () => [...document.querySelectorAll('[role="option"],.MuiAutocomplete-option,li')]
    .find(n => (n.textContent||'').trim() === text);
  let opt=findOption(), t0=Date.now();
  while(!opt && Date.now()-t0<1000){ if (window.STOP_TEST) return false; await sleep(100); opt=findOption(); }
  if(opt) opt.click();
  await sleep(80);
  return !!opt;
}

/* ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ */
async function typeDobSlow(input, dobStr, {perChar=DOB_TYPE_PAUSE, verifyPause=120, retries=2} = {}){
  if (!input) return false;
  for (let r=0; r<=retries; r++){
    input.focus(); await sleep(80);
    setValue(input, ''); await sleep(100);
    for (const ch of String(dobStr)) {
      setValue(input, (input.value || '') + ch);
      await sleep(perChar);
    }
    input.blur?.();
    await sleep(verifyPause);
    const got = (input.value ?? input.getAttribute('value') ?? '').replace(/\s/g,'');
    if (got === String(dobStr).replace(/\s/g,'')) return true;
  }
  return false;
}

function ageFromThaiDob(dobStr){
  const [d,m,be]=dobStr.split('/').map(x=>parseInt(x,10));
  if(!d||!m||!be) return '';
  const y=be-543, dob=new Date(y,m-1,d), t=new Date();
  let a=t.getFullYear()-dob.getFullYear();
  const md=t.getMonth()-dob.getMonth();
  if(md<0 || (md===0 && t.getDate()<dob.getDate())) a--;
  return a;
}

function formatMoney(n){
  return Number.isFinite(n)
    ? n.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2})
    : '';
}

async function waitFor(sel, {timeout=8000, interval=120} = {}){
  const t0 = Date.now();
  while (Date.now() - t0 < timeout) {
    if (window.STOP_TEST) return null;
    const el = document.querySelector(sel);
    if (el) return el;
    await sleep(interval);
  }
  return null;
}

async function copyText(text){
  try{ await navigator.clipboard.writeText(text); }
  catch{ console.log(text); }
}

/*************** MONEY & FALLBACK HELPERS ***************/
function parseMoney(text){
  if (!text) return NaN;
  const cleaned = String(text).replace(/[‡∏ø,\s]/g,'').replace(/‡∏ö‡∏≤‡∏ó/g,'');
  const m = cleaned.match(/-?\d+(?:\.\d+)?/);
  return m ? Number(m[0]) : NaN;
}
function isVisible(el){
  if (!el) return false;
  const st = getComputedStyle(el);
  return st && st.display!=='none' && st.visibility!=='hidden' && el.offsetParent !== null;
}
function scoreCandidate(el){
  const txt = (el.innerText || el.textContent || '').trim();
  if (!/[\d,]+\.\d{2}/.test(txt)) return -1;
  const st = getComputedStyle(el);
  let score = 0;
  const fs = parseFloat(st.fontSize) || 0;
  const fw = parseInt(st.fontWeight,10) || 400;
  if (fs >= 40) score += 3;       // ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà
  if (fw >= 700) score += 2;       // ‡∏´‡∏ô‡∏≤
  if (st.color && st.color.includes('255, 177, 74')) score += 3; // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  if (!isVisible(el)) score -= 3;
  return score;
}
function findHeadingContainer(){
  const all = document.querySelectorAll('#tab\\/quotation *');
  for (const el of all){
    const txt = (el.innerText || el.textContent || '').trim();
    if (txt && txt.includes('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏†‡∏±‡∏¢')){
      return el.closest('div') || el.parentElement || el;
    }
  }
  return document.querySelector('#tab\\/quotation') || document.body;
}
function findActualElementFallback(){
  const container = findHeadingContainer();
  if (!container) return null;
  const cands = [...container.querySelectorAll('p, span, h1, h2, div')];
  let best = null, bestScore = -1;
  for (const el of cands){
    const txt = (el.innerText || el.textContent || '').trim();
    if (!txt) continue;
    if (!/[\d,]+\.\d{2}/.test(txt)) continue;
    const sc = scoreCandidate(el);
    if (sc > bestScore){ bestScore = sc; best = el; }
  }
  if (best){
    console.log('üîé Fallback found element:', best, 'text=', (best.innerText||best.textContent||'').trim());
  }
  return best;
}

/*************** ACTUAL (NUMBER or POPUP) ***************/
async function getActualNumberOnce(timeout=3500){
  // (1) ‡πÉ‡∏ä‡πâ selector ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡πà‡∏≠‡∏ô
  const t0 = Date.now();
  while (Date.now() - t0 < timeout){
    const el = document.querySelector(ACTUAL_SELECTOR);
    if (el){
      const num = parseMoney((el.innerText || el.textContent || '').trim());
      if (Number.isFinite(num)) return num;
    }
    await sleep(100);
  }
  // (2) ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‚Üí fallback
  const fb = findActualElementFallback();
  if (fb){
    const num = parseMoney((fb.innerText || fb.textContent || '').trim());
    if (Number.isFinite(num)) return num;
  }
  return NaN;
}

/*************** POPUP HANDLING ***************/
function getPopupMessageNow(){
  const containers = [
    ...document.querySelectorAll('[role="dialog"] .MuiDialogContent-root'),
    ...document.querySelectorAll('.MuiDialogContent-root'),
    ...document.querySelectorAll('[role="dialog"], .MuiDialog-paper, .MuiModal-root')
  ];
  for (const el of containers) {
    const txt = (el.innerText || el.textContent || '').trim();
    if (txt && txt.length <= 500) {
      const cleaned = txt.replace(/\s{2,}/g,' ').trim();
      if (cleaned) return cleaned;
    }
  }
  return null;
}
async function waitPopupOr(selector, {timeout=4000, poll=100} = {}){
  const t0 = Date.now();
  while (Date.now() - t0 < timeout) {
    if (window.STOP_TEST) return { type:'stopped' };
    const popupText = getPopupMessageNow();
    if (popupText) return { type:'popup', popupText };
    const el = document.querySelector(selector);
    if (el) return { type:'selector', el };
    await sleep(poll);
  }
  const popupText = getPopupMessageNow();
  if (popupText) return { type:'popup', popupText };
  return { type:'timeout' };
}
async function closePopup({timeout=2000}={}) {
  const root = document.querySelector('[role="dialog"], .MuiDialog-root, .MuiModal-root');
  if (!root) return false;
  const buttonCandidates = [
    'button[aria-label="Close"]',
    '.MuiDialogTitle-root button',
    '.MuiDialogActions-root button',
    'button'
  ];
  let clicked = false;
  for (const sel of buttonCandidates) {
    const btn = root.querySelector(sel);
    if (btn) { btn.click(); clicked = true; await sleep(200); break; }
  }
  if (!clicked) {
    document.dispatchEvent(new KeyboardEvent('keydown', {key:'Escape', keyCode:27, which:27, bubbles:true}));
    await sleep(200);
  }
  const t0 = Date.now();
  while (Date.now() - t0 < timeout) {
    const still = document.querySelector('[role="dialog"], .MuiDialog-root, .MuiModal-root');
    if (!still) return true;
    await sleep(100);
  }
  const still = document.querySelector('[role="dialog"], .MuiDialog-root, .MuiModal-root');
  if (still) still.remove();
  await sleep(150);
  return true;
}

async function getActualOrPopup(){
  const res = await waitPopupOr(ACTUAL_SELECTOR, { timeout: 4000, poll: 100 });
  if (res.type === 'popup') {
    return { mode:'popup', popup: res.popupText, num: NaN };
  }
  const num = await getActualNumberOnce(3500);
  if (Number.isFinite(num)) return { mode:'number', num };
  return { mode:'none', num: NaN };
}

/**************** UI ACTIONS ****************/
function getCalcButtonByMuiLabel(){
  const span = [...document.querySelectorAll('span.MuiButton-label, span')]
    .find(s => (s.textContent||'').trim() === '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏µ‡πâ‡∏¢');
  return span?.closest('button') || null;
}
function getCalcButtonFallback(){
  return [...document.querySelectorAll('button,[role="button"]')]
    .find(b => (b.textContent||'').includes('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ö‡∏µ‡πâ‡∏¢'))
    || document.querySelector('button.MuiButton-containedPrimary, button.MuiButton-contained');
}
async function clickCalcButton({retries=3,waitAfter=500}={}){
  for(let i=0;i<retries;i++){
    if (window.STOP_TEST) return false;
    const btn = getCalcButtonByMuiLabel() || getCalcButtonFallback();
    if(!btn){ await sleep(150); continue; }
    const cov = document.querySelector('[name="coverageYear"]');
    cov?.blur?.();
    await sleep(200);
    btn.scrollIntoView({block:'center',inline:'center'});
    if (btn.disabled){ await sleep(200); continue; }
    try{ btn.click(); }catch{}
    btn.dispatchEvent(new MouseEvent('pointerdown',{bubbles:true}));
    btn.dispatchEvent(new MouseEvent('mousedown',{bubbles:true}));
    btn.dispatchEvent(new MouseEvent('mouseup',{bubbles:true}));
    btn.dispatchEvent(new MouseEvent('click',{bubbles:true}));
    await sleep(waitAfter);
    return true;
  }
  return false;
}

/**************** RUNNER ****************/
(async()=>{
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Premium Calculator (fallback DOM, ‡∏õ‡∏¥‡∏î‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û, ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå, STOP & Copy TSV)');
  const results=[];

  for(let i=0;i<scenarios.length;i++){
    if (window.STOP_TEST) { console.warn('üõë Stopped'); break; }
    const sc=scenarios[i];
    console.log(`\nüìã TC-${String(i+1).padStart(3,'0')}:`, sc);

    // ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏á)
    await selectMuiByText(document.querySelector('[name="insureTitleCode"]'), sc.title);
    await sleep(DELAY_BETWEEN_FIELDS);
    await typeDobSlow(document.querySelector('#insureBirthdate'), sc.dob);
    await sleep(DELAY_BETWEEN_FIELDS);
    await ensureValue(document.querySelector('[name="sumInsure"]'), sc.sum);
    await sleep(120);
    await ensureValue(document.querySelector('[name="coverageYear"]'), sc.coverage);
    console.log('‚úÖ ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

    // ‡∏Å‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    await clickCalcButton({retries:1, waitAfter:600});

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏• / popup
    let popupMsg = '';
    let actualNum = NaN;

    const first = await getActualOrPopup();
    if (first.mode === 'popup') {
      popupMsg = first.popup;
      await closePopup();
      await sleep(250);
      actualNum = await getActualNumberOnce(1500);
      if (!Number.isFinite(actualNum)) {
        await clickCalcButton({retries:1, waitAfter:600});
        actualNum = await getActualNumberOnce(1500);
      }
    } else if (first.mode === 'number') {
      actualNum = first.num;
    } else {
      await clickCalcButton({retries:1, waitAfter:600});
      actualNum = await getActualNumberOnce(1500);
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const expectedNum = Number(sc.expected);
    let status;
    if (Number.isFinite(actualNum)) {
      status = Math.abs(actualNum - expectedNum) <= EPS ? "‚úÖPassed" : "‚ùåFailed";
    } else if (popupMsg) {
      status = "‚ö†Ô∏èPopup";
    } else {
      status = "‚ùìNo Result";
    }

    const result = {
      "TC No": `TC-${String(i+1).padStart(3,'0')}`,
      "‡∏Å‡∏£‡∏ì‡∏µ": sc.title==='‡∏ô‡∏≤‡∏¢'?'‡πÄ‡∏û‡∏®‡∏ä‡∏≤‡∏¢':'‡πÄ‡∏û‡∏®‡∏´‡∏ç‡∏¥‡∏á',
      "‡∏≠‡∏≤‡∏¢‡∏∏": ageFromThaiDob(sc.dob),
      "‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î": sc.dob,
      "‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô": Number(sc.sum).toLocaleString(),
      "‡∏£‡∏∞‡∏¢‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á": sc.coverage,
      "Expected": formatMoney(expectedNum),
      "Actual": formatMoney(actualNum),
      "Popup Msg": popupMsg,
      "‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö": status
    };

    results.push(result);
    window.LAST_RESULTS = results.slice();
    console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', result);

    await sleep(300);
  }

  console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  console.table(results);

  const finalTSV = buildTSV(results, EXPORT_COLUMNS);
  await copyText(finalTSV);
  console.log('üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡πâ‡∏ß');

  window.LAST_RESULTS = results.slice();

  const passed   = results.filter(r => r["‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"] === "‚úÖPassed").length;
  const failed   = results.filter(r => r["‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"] === "‚ùåFailed").length;
  const popups   = results.filter(r => r["‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"] === "‚ö†Ô∏èPopup").length;
  const noResult = results.filter(r => r["‡∏ú‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö"] === "‚ùìNo Result").length;
  console.log(`\nüìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: Passed: ${passed}, Failed: ${failed}, Popup: ${popups}, No Result: ${noResult}`);
})().catch(e=>console.error(e));
